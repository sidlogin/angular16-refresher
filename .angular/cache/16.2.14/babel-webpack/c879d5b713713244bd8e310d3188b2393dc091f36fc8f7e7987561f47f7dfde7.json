{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotesService {\n  constructor() {\n    this.notes = [];\n    this.notesSubject = new BehaviorSubject([]);\n    this.isEdit = new BehaviorSubject(false);\n  }\n  getNotesObservable() {\n    return this.notesSubject.asObservable();\n  }\n  createNote(note) {\n    if (note) {\n      note.id = this.notes.length + 1;\n      this.notes.push(note);\n      this.notesSubject.next(this.notes);\n    }\n  }\n  deleteNote(id) {\n    this.notes = this.notes.filter(note => note.id !== id);\n    this.notesSubject.next(this.notes);\n  }\n  setEditable(isEdit) {\n    this.isEdit.next(isEdit);\n  }\n  getEditable() {\n    return this.isEdit.asObservable();\n  }\n  updateNote(note) {\n    const index = this.notes.findIndex(n => n.id === note.id);\n    if (index !== -1) {\n      this.notes[index] = note;\n      this.notesSubject.next(this.notes);\n    }\n  }\n  static #_ = this.ɵfac = function NotesService_Factory(t) {\n    return new (t || NotesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotesService,\n    factory: NotesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","NotesService","constructor","notes","notesSubject","isEdit","getNotesObservable","asObservable","createNote","note","id","length","push","next","deleteNote","filter","setEditable","getEditable","updateNote","index","findIndex","n","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\workspace\\2024\\angular\\angular16-refresher\\src\\app\\crud-app\\services\\notes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Note } from '../interfaces/note';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesService {\n  private notes: Note[] = [];\n  private notesSubject = new BehaviorSubject<Note[]>([]);\n\n  private isEdit = new BehaviorSubject<boolean>(false);\n  constructor() { }\n\n  getNotesObservable(): Observable<Note[]> {\n    return this.notesSubject.asObservable();\n  }\n\n  createNote(note: Note): void {\n    if (note) {\n      note.id = this.notes.length + 1;\n      this.notes.push(note);\n      this.notesSubject.next(this.notes);\n    }\n  }\n\n  deleteNote(id: number): void {\n    this.notes = this.notes.filter(note => note.id !== id);\n    this.notesSubject.next(this.notes);\n  }\n\n  setEditable(isEdit: boolean): void {\n    this.isEdit.next(isEdit);\n  }\n\n  getEditable(): Observable<boolean> {\n    return this.isEdit.asObservable();\n  }\n\n  updateNote(note: Note): void {\n    const index = this.notes.findIndex(n => n.id === note.id);\n    if (index !== -1) {\n      this.notes[index] = note;\n      this.notesSubject.next(this.notes);\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,YAAY;EAKvBC,YAAA;IAJQ,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,YAAY,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IAE9C,KAAAK,MAAM,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;EACpC;EAEhBM,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACF,YAAY,CAACG,YAAY,EAAE;EACzC;EAEAC,UAAUA,CAACC,IAAU;IACnB,IAAIA,IAAI,EAAE;MACRA,IAAI,CAACC,EAAE,GAAG,IAAI,CAACP,KAAK,CAACQ,MAAM,GAAG,CAAC;MAC/B,IAAI,CAACR,KAAK,CAACS,IAAI,CAACH,IAAI,CAAC;MACrB,IAAI,CAACL,YAAY,CAACS,IAAI,CAAC,IAAI,CAACV,KAAK,CAAC;;EAEtC;EAEAW,UAAUA,CAACJ,EAAU;IACnB,IAAI,CAACP,KAAK,GAAG,IAAI,CAACA,KAAK,CAACY,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;IACtD,IAAI,CAACN,YAAY,CAACS,IAAI,CAAC,IAAI,CAACV,KAAK,CAAC;EACpC;EAEAa,WAAWA,CAACX,MAAe;IACzB,IAAI,CAACA,MAAM,CAACQ,IAAI,CAACR,MAAM,CAAC;EAC1B;EAEAY,WAAWA,CAAA;IACT,OAAO,IAAI,CAACZ,MAAM,CAACE,YAAY,EAAE;EACnC;EAEAW,UAAUA,CAACT,IAAU;IACnB,MAAMU,KAAK,GAAG,IAAI,CAAChB,KAAK,CAACiB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKD,IAAI,CAACC,EAAE,CAAC;IACzD,IAAIS,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAAChB,KAAK,CAACgB,KAAK,CAAC,GAAGV,IAAI;MACxB,IAAI,CAACL,YAAY,CAACS,IAAI,CAAC,IAAI,CAACV,KAAK,CAAC;;EAEtC;EAAC,QAAAmB,CAAA,G;qBAtCUrB,YAAY;EAAA;EAAA,QAAAsB,EAAA,G;WAAZtB,YAAY;IAAAuB,OAAA,EAAZvB,YAAY,CAAAwB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}